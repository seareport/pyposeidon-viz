[tool.poetry]
name = "pyposeidon-viz"
version = "0.0.1"
description = ""
authors = ["Panos Mavrogiorgos <pmav99@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9"
cartopy = "*"
datashader = "*"
geopandas = "*"
geoviews = "*"
holoviews = "*"
hvplot = "*"
itkwidgets = "*"
matplotlib = "*"
mayavi = "*"
numpy = "*"
pandas = "*"
shapely = "*"
spatialpandas = "*"
xarray = "*"

[tool.poetry.group.dev.dependencies]
mypy = "*"
pytest = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --verbose --showlocals --tb=short"
testpaths = [
    "tests",
]
filterwarnings = [
    'ignore:`np.*` is a deprecated alias for .* `np.*`.*:DeprecationWarning',
    'ignore:distutils Version classes are deprecated. Use packaging.version instead:DeprecationWarning',
    "ignore:Using or importing the ABCs from 'collections' instead of from 'collections.abc':DeprecationWarning",
    "ignore:A private pytest class or function was used.:pytest.PytestDeprecationWarning"
]

[tool.black]
line-length = 119
target-version = ['py39']

[tool.mypy]
python_version = "3.9"
plugins = []
show_error_codes = true
show_column_numbers = true
show_error_context = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true
strict = true
ignore_missing_imports = true

# FIXME These errors get thrown by `searvey/coops.py`
# I can't find a way to disable them on a per-module basis, so we are disabling them globally.
# We should comment them out one by one, run `make mypy`, fix the errors and move on.
disable_error_code = [
    "assignment",
    "override",
    "attr-defined",
    "no-any-return",
    "unreachable",
]

# mypy per-module options:
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = true

[tool.ruff]
target-version = "py39"
line-length = 108
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "C90",  # mccabe
]
ignore = [
    "E501", # line-too-long
]
